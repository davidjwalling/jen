#include "aes.h"
#include "asn.h"
#include "oid.h"

const uint8_t S[] = {
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5, 0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0, 0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc, 0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a, 0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0, 0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b, 0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85, 0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5, 0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17, 0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88, 0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c, 0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9, 0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6, 0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e, 0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94, 0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68, 0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
};

const uint8_t R[] = {
    0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80, 0x1b,0x36
};

const uint8_t X2[] = {
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e, 0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e, 0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e, 0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e, 0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e, 0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae, 0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce, 0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee, 0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15, 0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35, 0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55, 0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75, 0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95, 0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5, 0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5, 0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5, 0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

const uint8_t X3[] = {
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09, 0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39, 0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69, 0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59, 0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9, 0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9, 0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9, 0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99, 0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92, 0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2, 0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2, 0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2, 0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52, 0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62, 0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32, 0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02, 0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

const uint8_t T[] = {
    0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38, 0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
    0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87, 0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
    0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d, 0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
    0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2, 0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
    0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16, 0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
    0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda, 0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
    0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a, 0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
    0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02, 0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
    0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea, 0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
    0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85, 0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
    0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89, 0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
    0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20, 0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
    0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31, 0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
    0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d, 0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
    0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0, 0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
    0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26, 0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d
};

const uint8_t X9[] = {
    0x00,0x09,0x12,0x1B,0x24,0x2D,0x36,0x3F, 0x48,0x41,0x5A,0x53,0x6C,0x65,0x7E,0x77,
    0x90,0x99,0x82,0x8B,0xB4,0xBD,0xA6,0xAF, 0xD8,0xD1,0xCA,0xC3,0xFC,0xF5,0xEE,0xE7,
    0x3B,0x32,0x29,0x20,0x1F,0x16,0x0D,0x04, 0x73,0x7A,0x61,0x68,0x57,0x5E,0x45,0x4C,
    0xAB,0xA2,0xB9,0xB0,0x8F,0x86,0x9D,0x94, 0xE3,0xEA,0xF1,0xF8,0xC7,0xCE,0xD5,0xDC,
    0x76,0x7F,0x64,0x6D,0x52,0x5B,0x40,0x49, 0x3E,0x37,0x2C,0x25,0x1A,0x13,0x08,0x01,
    0xE6,0xEF,0xF4,0xFD,0xC2,0xCB,0xD0,0xD9, 0xAE,0xA7,0xBC,0xB5,0x8A,0x83,0x98,0x91,
    0x4D,0x44,0x5F,0x56,0x69,0x60,0x7B,0x72, 0x05,0x0C,0x17,0x1E,0x21,0x28,0x33,0x3A,
    0xDD,0xD4,0xCF,0xC6,0xF9,0xF0,0xEB,0xE2, 0x95,0x9C,0x87,0x8E,0xB1,0xB8,0xA3,0xAA,
    0xEC,0xE5,0xFE,0xF7,0xC8,0xC1,0xDA,0xD3, 0xA4,0xAD,0xB6,0xBF,0x80,0x89,0x92,0x9B,
    0x7C,0x75,0x6E,0x67,0x58,0x51,0x4A,0x43, 0x34,0x3D,0x26,0x2F,0x10,0x19,0x02,0x0B,
    0xD7,0xDE,0xC5,0xCC,0xF3,0xFA,0xE1,0xE8, 0x9F,0x96,0x8D,0x84,0xBB,0xB2,0xA9,0xA0,
    0x47,0x4E,0x55,0x5C,0x63,0x6A,0x71,0x78, 0x0F,0x06,0x1D,0x14,0x2B,0x22,0x39,0x30,
    0x9A,0x93,0x88,0x81,0xBE,0xB7,0xAC,0xA5, 0xD2,0xDB,0xC0,0xC9,0xF6,0xFF,0xE4,0xED,
    0x0A,0x03,0x18,0x11,0x2E,0x27,0x3C,0x35, 0x42,0x4B,0x50,0x59,0x66,0x6F,0x74,0x7D,
    0xA1,0xA8,0xB3,0xBA,0x85,0x8C,0x97,0x9E, 0xE9,0xE0,0xFB,0xF2,0xCD,0xC4,0xDF,0xD6,
    0x31,0x38,0x23,0x2A,0x15,0x1C,0x07,0x0E, 0x79,0x70,0x6B,0x62,0x5D,0x54,0x4F,0x46
};

const uint8_t XB[] = {
    0x00,0x0B,0x16,0x1D,0x2C,0x27,0x3A,0x31, 0x58,0x53,0x4E,0x45,0x74,0x7F,0x62,0x69,
    0xB0,0xBB,0xA6,0xAD,0x9C,0x97,0x8A,0x81, 0xE8,0xE3,0xFE,0xF5,0xC4,0xCF,0xD2,0xD9,
    0x7B,0x70,0x6D,0x66,0x57,0x5C,0x41,0x4A, 0x23,0x28,0x35,0x3E,0x0F,0x04,0x19,0x12,
    0xCB,0xC0,0xDD,0xD6,0xE7,0xEC,0xF1,0xFA, 0x93,0x98,0x85,0x8E,0xBF,0xB4,0xA9,0xA2,
    0xF6,0xFD,0xE0,0xEB,0xDA,0xD1,0xCC,0xC7, 0xAE,0xA5,0xB8,0xB3,0x82,0x89,0x94,0x9F,
    0x46,0x4D,0x50,0x5B,0x6A,0x61,0x7C,0x77, 0x1E,0x15,0x08,0x03,0x32,0x39,0x24,0x2F,
    0x8D,0x86,0x9B,0x90,0xA1,0xAA,0xB7,0xBC, 0xD5,0xDE,0xC3,0xC8,0xF9,0xF2,0xEF,0xE4,
    0x3D,0x36,0x2B,0x20,0x11,0x1A,0x07,0x0C, 0x65,0x6E,0x73,0x78,0x49,0x42,0x5F,0x54,
    0xF7,0xFC,0xE1,0xEA,0xDB,0xD0,0xCD,0xC6, 0xAF,0xA4,0xB9,0xB2,0x83,0x88,0x95,0x9E,
    0x47,0x4C,0x51,0x5A,0x6B,0x60,0x7D,0x76, 0x1F,0x14,0x09,0x02,0x33,0x38,0x25,0x2E,
    0x8C,0x87,0x9A,0x91,0xA0,0xAB,0xB6,0xBD, 0xD4,0xDF,0xC2,0xC9,0xF8,0xF3,0xEE,0xE5,
    0x3C,0x37,0x2A,0x21,0x10,0x1B,0x06,0x0D, 0x64,0x6F,0x72,0x79,0x48,0x43,0x5E,0x55,
    0x01,0x0A,0x17,0x1C,0x2D,0x26,0x3B,0x30, 0x59,0x52,0x4F,0x44,0x75,0x7E,0x63,0x68,
    0xB1,0xBA,0xA7,0xAC,0x9D,0x96,0x8B,0x80, 0xE9,0xE2,0xFF,0xF4,0xC5,0xCE,0xD3,0xD8,
    0x7A,0x71,0x6C,0x67,0x56,0x5D,0x40,0x4B, 0x22,0x29,0x34,0x3F,0x0E,0x05,0x18,0x13,
    0xCA,0xC1,0xDC,0xD7,0xE6,0xED,0xF0,0xFB, 0x92,0x99,0x84,0x8F,0xBE,0xB5,0xA8,0xA3
};

const uint8_t XD[] = {
    0x00,0x0D,0x1A,0x17,0x34,0x39,0x2E,0x23, 0x68,0x65,0x72,0x7F,0x5C,0x51,0x46,0x4B,
    0xD0,0xDD,0xCA,0xC7,0xE4,0xE9,0xFE,0xF3, 0xB8,0xB5,0xA2,0xAF,0x8C,0x81,0x96,0x9B,
    0xBB,0xB6,0xA1,0xAC,0x8F,0x82,0x95,0x98, 0xD3,0xDE,0xC9,0xC4,0xE7,0xEA,0xFD,0xF0,
    0x6B,0x66,0x71,0x7C,0x5F,0x52,0x45,0x48, 0x03,0x0E,0x19,0x14,0x37,0x3A,0x2D,0x20,
    0x6D,0x60,0x77,0x7A,0x59,0x54,0x43,0x4E, 0x05,0x08,0x1F,0x12,0x31,0x3C,0x2B,0x26,
    0xBD,0xB0,0xA7,0xAA,0x89,0x84,0x93,0x9E, 0xD5,0xD8,0xCF,0xC2,0xE1,0xEC,0xFB,0xF6,
    0xD6,0xDB,0xCC,0xC1,0xE2,0xEF,0xF8,0xF5, 0xBE,0xB3,0xA4,0xA9,0x8A,0x87,0x90,0x9D,
    0x06,0x0B,0x1C,0x11,0x32,0x3F,0x28,0x25, 0x6E,0x63,0x74,0x79,0x5A,0x57,0x40,0x4D,
    0xDA,0xD7,0xC0,0xCD,0xEE,0xE3,0xF4,0xF9, 0xB2,0xBF,0xA8,0xA5,0x86,0x8B,0x9C,0x91,
    0x0A,0x07,0x10,0x1D,0x3E,0x33,0x24,0x29, 0x62,0x6F,0x78,0x75,0x56,0x5B,0x4C,0x41,
    0x61,0x6C,0x7B,0x76,0x55,0x58,0x4F,0x42, 0x09,0x04,0x13,0x1E,0x3D,0x30,0x27,0x2A,
    0xB1,0xBC,0xAB,0xA6,0x85,0x88,0x9F,0x92, 0xD9,0xD4,0xC3,0xCE,0xED,0xE0,0xF7,0xFA,
    0xB7,0xBA,0xAD,0xA0,0x83,0x8E,0x99,0x94, 0xDF,0xD2,0xC5,0xC8,0xEB,0xE6,0xF1,0xFC,
    0x67,0x6A,0x7D,0x70,0x53,0x5E,0x49,0x44, 0x0F,0x02,0x15,0x18,0x3B,0x36,0x21,0x2C,
    0x0C,0x01,0x16,0x1B,0x38,0x35,0x22,0x2F, 0x64,0x69,0x7E,0x73,0x50,0x5D,0x4A,0x47,
    0xDC,0xD1,0xC6,0xCB,0xE8,0xE5,0xF2,0xFF, 0xB4,0xB9,0xAE,0xA3,0x80,0x8D,0x9A,0x97
};

const uint8_t XE[] = {
    0x00,0x0E,0x1C,0x12,0x38,0x36,0x24,0x2A, 0x70,0x7E,0x6C,0x62,0x48,0x46,0x54,0x5A,
    0xE0,0xEE,0xFC,0xF2,0xD8,0xD6,0xC4,0xCA, 0x90,0x9E,0x8C,0x82,0xA8,0xA6,0xB4,0xBA,
    0xDB,0xD5,0xC7,0xC9,0xE3,0xED,0xFF,0xF1, 0xAB,0xA5,0xB7,0xB9,0x93,0x9D,0x8F,0x81,
    0x3B,0x35,0x27,0x29,0x03,0x0D,0x1F,0x11, 0x4B,0x45,0x57,0x59,0x73,0x7D,0x6F,0x61,
    0xAD,0xA3,0xB1,0xBF,0x95,0x9B,0x89,0x87, 0xDD,0xD3,0xC1,0xCF,0xE5,0xEB,0xF9,0xF7,
    0x4D,0x43,0x51,0x5F,0x75,0x7B,0x69,0x67, 0x3D,0x33,0x21,0x2F,0x05,0x0B,0x19,0x17,
    0x76,0x78,0x6A,0x64,0x4E,0x40,0x52,0x5C, 0x06,0x08,0x1A,0x14,0x3E,0x30,0x22,0x2C,
    0x96,0x98,0x8A,0x84,0xAE,0xA0,0xB2,0xBC, 0xE6,0xE8,0xFA,0xF4,0xDE,0xD0,0xC2,0xCC,
    0x41,0x4F,0x5D,0x53,0x79,0x77,0x65,0x6B, 0x31,0x3F,0x2D,0x23,0x09,0x07,0x15,0x1B,
    0xA1,0xAF,0xBD,0xB3,0x99,0x97,0x85,0x8B, 0xD1,0xDF,0xCD,0xC3,0xE9,0xE7,0xF5,0xFB,
    0x9A,0x94,0x86,0x88,0xA2,0xAC,0xBE,0xB0, 0xEA,0xE4,0xF6,0xF8,0xD2,0xDC,0xCE,0xC0,
    0x7A,0x74,0x66,0x68,0x42,0x4C,0x5E,0x50, 0x0A,0x04,0x16,0x18,0x32,0x3C,0x2E,0x20,
    0xEC,0xE2,0xF0,0xFE,0xD4,0xDA,0xC8,0xC6, 0x9C,0x92,0x80,0x8E,0xA4,0xAA,0xB8,0xB6,
    0x0C,0x02,0x10,0x1E,0x34,0x3A,0x28,0x26, 0x7C,0x72,0x60,0x6E,0x44,0x4A,0x58,0x56,
    0x37,0x39,0x2B,0x25,0x0F,0x01,0x13,0x1D, 0x47,0x49,0x5B,0x55,0x7F,0x71,0x63,0x6D,
    0xD7,0xD9,0xCB,0xC5,0xEF,0xE1,0xF3,0xFD, 0xA7,0xA9,0xBB,0xB5,0x9F,0x91,0x83,0x8D
};

AES::AES()
{
    Init();
}

AES::~AES()
{
    Reset();
}

void AES::Init()
{
    _keyBytes = _rounds = _scheduleBytes = _mode = 0;
    memset(_key, 0, sizeof(_key));
    memset(_iv, 0, sizeof(_iv));
    memset(_input, 0, sizeof(_input));
    memset(_state, 0, sizeof(_state));
    memset(_output, 0, sizeof(_output));
    memset(_schedule, 0, sizeof(_schedule));
}

void AES::Reset()
{
    Init();
}

void AES::ExpandKey()
{
    uint32_t i, j, m, n;
    uint8_t* p = _key;
    uint8_t* q = _schedule;
    uint8_t* r = q;
    n = (_keyBytes > 24) ? 16 : 0;
    for (i = j = 0; i < _keyBytes; *q++ = *p++, i++);
    p = q - 4;
    for (; i < _scheduleBytes; i += 4) {
        m = i % _keyBytes;
        if (!m) {
            q[0] = (uint8_t)(S[p[1]] ^ R[j]);
            q[1] = (uint8_t)(S[p[2]]);
            q[2] = (uint8_t)(S[p[3]]);
            q[3] = (uint8_t)(S[p[0]]);
            *(uint32_t*)q ^= *(uint32_t*)r;
            j++;
        } else if (n == m) {
            q[0] = (uint8_t)(S[p[0]]);
            q[1] = (uint8_t)(S[p[1]]);
            q[2] = (uint8_t)(S[p[2]]);
            q[3] = (uint8_t)(S[p[3]]);
            *(uint32_t*)q ^= *(uint32_t*)r;
        } else {
            *(uint32_t*)q = *(uint32_t*)r ^ *(uint32_t*)p;
        }
        p += 4;
        q += 4;
        r += 4;
    }
}

void AES::SetMode(uint32_t mode)
{
    _keyBytes = ((mode & 0b0011) << 3) + 16;
    _rounds = ((mode & 0b0011) << 1) + 10;
    _scheduleBytes = ((_rounds + 1) * aes::blockbytes);
    _mode = (mode & 0b1100);
}

void AES::SetKey(uint8_t* key)
{
    memcpy(_key, key, _keyBytes);
    ExpandKey();
}

void AES::SetIV(uint8_t* iv)
{
    memcpy(_iv, iv, sizeof(_iv));
}

void AES::SetInput(uint8_t* input)
{
    memcpy(_input, input, sizeof(_input));
}

void AES::GetOutput(uint8_t* output)
{
    memcpy(output, _output, sizeof(_output));
}

void AES::Encipher()
{
    uint32_t i, j;
    uint8_t t;
    uint8_t r[aes::blockbytes];
    uint8_t* p;

    memcpy(_state, _input, sizeof(_state));

    uint32_t* ip = (uint32_t*)_state;
    uint32_t* iq = (uint32_t*)_schedule;
    uint32_t* ir = (uint32_t*)r;

    ip[0] ^= *iq++;
    ip[1] ^= *iq++;
    ip[2] ^= *iq++;
    ip[3] ^= *iq++;

    p = _state;
    for (i = 1; i < _rounds; i++) {

        for (j = 0; j < sizeof(_state); p[j] = S[p[j]], j++);
        t = p[1]; p[1] = p[5]; p[5] = p[9]; p[9] = p[13]; p[13] = t;
        t = p[2]; p[2] = p[10]; p[10] = t;
        t = p[6]; p[6] = p[14]; p[14] = t;
        t = p[3]; p[3] = p[15]; p[15] = p[11]; p[11] = p[7]; p[7] = t;

        r[0] = (uint8_t)(X2[p[0]] ^ X3[p[1]] ^ p[2] ^ p[3]);
        r[1] = (uint8_t)(p[0] ^ X2[p[1]] ^ X3[p[2]] ^ p[3]);
        r[2] = (uint8_t)(p[0] ^ p[1] ^ X2[p[2]] ^ X3[p[3]]);
        r[3] = (uint8_t)(X3[p[0]] ^ p[1] ^ p[2] ^ X2[p[3]]);
        r[4] = (uint8_t)(X2[p[4]] ^ X3[p[5]] ^ p[6] ^ p[7]);
        r[5] = (uint8_t)(p[4] ^ X2[p[5]] ^ X3[p[6]] ^ p[7]);
        r[6] = (uint8_t)(p[4] ^ p[5] ^ X2[p[6]] ^ X3[p[7]]);
        r[7] = (uint8_t)(X3[p[4]] ^ p[5] ^ p[6] ^ X2[p[7]]);
        r[8] = (uint8_t)(X2[p[8]] ^ X3[p[9]] ^ p[10] ^ p[11]);
        r[9] = (uint8_t)(p[8] ^ X2[p[9]] ^ X3[p[10]] ^ p[11]);
        r[10] = (uint8_t)(p[8] ^ p[9] ^ X2[p[10]] ^ X3[p[11]]);
        r[11] = (uint8_t)(X3[p[8]] ^ p[9] ^ p[10] ^ X2[p[11]]);
        r[12] = (uint8_t)(X2[p[12]] ^ X3[p[13]] ^ p[14] ^ p[15]);
        r[13] = (uint8_t)(p[12] ^ X2[p[13]] ^ X3[p[14]] ^ p[15]);
        r[14] = (uint8_t)(p[12] ^ p[13] ^ X2[p[14]] ^ X3[p[15]]);
        r[15] = (uint8_t)(X3[p[12]] ^ p[13] ^ p[14] ^ X2[p[15]]);

        ip[0] = ir[0] ^ *iq++;
        ip[1] = ir[1] ^ *iq++;
        ip[2] = ir[2] ^ *iq++;
        ip[3] = ir[3] ^ *iq++;
    }
    for (j = 0; j < sizeof(_state); p[j] = S[p[j]], j++);
    t = p[1]; p[1] = p[5]; p[5] = p[9]; p[9] = p[13]; p[13] = t;
    t = p[2]; p[2] = p[10]; p[10] = t;
    t = p[6]; p[6] = p[14]; p[14] = t;
    t = p[3]; p[3] = p[15]; p[15] = p[11]; p[11] = p[7]; p[7] = t;

    ip[0] ^= *iq++;
    ip[1] ^= *iq++;
    ip[2] ^= *iq++;
    ip[3] ^= *iq++;

    memcpy(_output, _state, sizeof(_output));
}

void AES::InvCipher()
{
    uint32_t i, j;
    uint8_t t;
    uint8_t r[aes::blockbytes];
    uint8_t* p;

    memcpy(_state, _input, sizeof(_state));

    uint32_t* ip = (uint32_t*)_state;
    uint32_t* iq = (uint32_t*)&_schedule[_scheduleBytes - 4];
    uint32_t* ir = (uint32_t*)r;

    ir[3] = ip[3] ^ *iq--;
    ir[2] = ip[2] ^ *iq--;
    ir[1] = ip[1] ^ *iq--;
    ir[0] = ip[0] ^ *iq--;

    p = _state;
    for (i = 1; i < _rounds; i++) {

        t = r[1]; r[1] = r[13]; r[13] = r[9]; r[9] = r[5]; r[5] = t;
        t = r[2]; r[2] = r[10]; r[10] = t;
        t = r[6]; r[6] = r[14]; r[14] = t;
        t = r[3]; r[3] = r[7]; r[7] = r[11]; r[11] = r[15]; r[15] = t;
        for (j = 0; j < sizeof(_state); p[j] = T[r[j]], j++);

        ip[3] ^= *iq--;
        ip[2] ^= *iq--;
        ip[1] ^= *iq--;
        ip[0] ^= *iq--;

        r[0] = (uint8_t)(XE[p[0]] ^ XB[p[1]] ^ XD[p[2]] ^ X9[p[3]]);
        r[1] = (uint8_t)(X9[p[0]] ^ XE[p[1]] ^ XB[p[2]] ^ XD[p[3]]);
        r[2] = (uint8_t)(XD[p[0]] ^ X9[p[1]] ^ XE[p[2]] ^ XB[p[3]]);
        r[3] = (uint8_t)(XB[p[0]] ^ XD[p[1]] ^ X9[p[2]] ^ XE[p[3]]);
        r[4] = (uint8_t)(XE[p[4]] ^ XB[p[5]] ^ XD[p[6]] ^ X9[p[7]]);
        r[5] = (uint8_t)(X9[p[4]] ^ XE[p[5]] ^ XB[p[6]] ^ XD[p[7]]);
        r[6] = (uint8_t)(XD[p[4]] ^ X9[p[5]] ^ XE[p[6]] ^ XB[p[7]]);
        r[7] = (uint8_t)(XB[p[4]] ^ XD[p[5]] ^ X9[p[6]] ^ XE[p[7]]);
        r[8] = (uint8_t)(XE[p[8]] ^ XB[p[9]] ^ XD[p[10]] ^ X9[p[11]]);
        r[9] = (uint8_t)(X9[p[8]] ^ XE[p[9]] ^ XB[p[10]] ^ XD[p[11]]);
        r[10] = (uint8_t)(XD[p[8]] ^ X9[p[9]] ^ XE[p[10]] ^ XB[p[11]]);
        r[11] = (uint8_t)(XB[p[8]] ^ XD[p[9]] ^ X9[p[10]] ^ XE[p[11]]);
        r[12] = (uint8_t)(XE[p[12]] ^ XB[p[13]] ^ XD[p[14]] ^ X9[p[15]]);
        r[13] = (uint8_t)(X9[p[12]] ^ XE[p[13]] ^ XB[p[14]] ^ XD[p[15]]);
        r[14] = (uint8_t)(XD[p[12]] ^ X9[p[13]] ^ XE[p[14]] ^ XB[p[15]]);
        r[15] = (uint8_t)(XB[p[12]] ^ XD[p[13]] ^ X9[p[14]] ^ XE[p[15]]);
    }

    t = r[1]; r[1] = r[13]; r[13] = r[9]; r[9] = r[5]; r[5] = t;
    t = r[2]; r[2] = r[10]; r[10] = t;
    t = r[6]; r[6] = r[14]; r[14] = t;
    t = r[3]; r[3] = r[7]; r[7] = r[11]; r[11] = r[15]; r[15] = t;
    for (j = 0; j < sizeof(_state); p[j] = T[r[j]], j++);

    ip[3] ^= *iq--;
    ip[2] ^= *iq--;
    ip[1] ^= *iq--;
    ip[0] ^= *iq--;

    memcpy(_output, _state, sizeof(_output));
}

void AESECB::Encrypt(uint8_t* plain, uint8_t* cipher)
{
    SetInput(plain);
    Encipher();
    GetOutput(cipher);
}

void AESECB::Decrypt(uint8_t* cipher, uint8_t* plain)
{
    SetInput(cipher);
    InvCipher();
    GetOutput(plain);
}

void AESCBC::Encrypt(uint8_t* plain, uint8_t* cipher)
{
    SetInput(plain);
    for (int i = 0; i < sizeof(_iv); _input[i] ^= _iv[i], i++);
    Encipher();
    for (int i = 0; i < sizeof(_iv); _iv[i] = _output[i], i++);
    GetOutput(cipher);
}

void AESCBC::Decrypt(uint8_t* cipher, uint8_t* plain)
{
    SetInput(cipher);
    InvCipher();
    for (int i = 0; i < sizeof(_iv); _output[i] ^= _iv[i], _iv[i] = _input[i], i++);
    GetOutput(plain);
}

AES128ECB::AES128ECB()
{
    Init();
    SetMode(aes::mode::_128ecb);
}

AES128ECB::~AES128ECB()
{
    Reset();
}

uint8_t* AES128ECB::PutOID(uint8_t* buf)
{
    uint8_t* p = buf;
    *p++ = asn::sequence;
    *p++ = 13;
    *p++ = asn::oid;
    *p++ = 9;
    *p++ = OID_BYTE1(oid::ccitt, oid::ccittco);
    *p++ = OID_HI(oid::ccittcous);
    *p++ = OID_LO(oid::ccittcous);
    *p++ = oid::ccittcous_org;
    *p++ = oid::ccittcous_orggov;
    *p++ = oid::ccittcous_orggovor;
    *p++ = oid::ccittcous_orggovor_nist;
    *p++ = oid::ccittcous_orggovor_nistaes;
    *p++ = oid::ccittcous_orggovor_nistaes_128ecb;
    *p++ = asn::null;
    *p++ = 0;
    return p;
}

AES128CBC::AES128CBC()
{
    Init();
    SetMode(aes::mode::_128cbc);
}

AES128CBC::~AES128CBC()
{
    Reset();
}

uint8_t* AES128CBC::PutOID(uint8_t* buf)
{
    uint8_t* p = buf;
    *p++ = asn::sequence;
    *p++ = 13;
    *p++ = asn::oid;
    *p++ = 9;
    *p++ = OID_BYTE1(oid::ccitt, oid::ccittco);
    *p++ = OID_HI(oid::ccittcous);
    *p++ = OID_LO(oid::ccittcous);
    *p++ = oid::ccittcous_org;
    *p++ = oid::ccittcous_orggov;
    *p++ = oid::ccittcous_orggovor;
    *p++ = oid::ccittcous_orggovor_nist;
    *p++ = oid::ccittcous_orggovor_nistaes;
    *p++ = oid::ccittcous_orggovor_nistaes_128cbc;
    *p++ = asn::null;
    *p++ = 0;
    return p;
}

AES192ECB::AES192ECB()
{
    Init();
    SetMode(aes::mode::_192ecb);
}

AES192ECB::~AES192ECB()
{
    Reset();
}

uint8_t* AES192ECB::PutOID(uint8_t* buf)
{
    uint8_t* p = buf;
    *p++ = asn::sequence;
    *p++ = 13;
    *p++ = asn::oid;
    *p++ = 9;
    *p++ = OID_BYTE1(oid::ccitt, oid::ccittco);
    *p++ = OID_HI(oid::ccittcous);
    *p++ = OID_LO(oid::ccittcous);
    *p++ = oid::ccittcous_org;
    *p++ = oid::ccittcous_orggov;
    *p++ = oid::ccittcous_orggovor;
    *p++ = oid::ccittcous_orggovor_nist;
    *p++ = oid::ccittcous_orggovor_nistaes;
    *p++ = oid::ccittcous_orggovor_nistaes_192ecb;
    *p++ = asn::null;
    *p++ = 0;
    return p;
}

AES192CBC::AES192CBC()
{
    Init();
    SetMode(aes::mode::_192cbc);
}

AES192CBC::~AES192CBC()
{
    Reset();
}

uint8_t* AES192CBC::PutOID(uint8_t* buf)
{
    uint8_t* p = buf;
    *p++ = asn::sequence;
    *p++ = 13;
    *p++ = asn::oid;
    *p++ = 9;
    *p++ = OID_BYTE1(oid::ccitt, oid::ccittco);
    *p++ = OID_HI(oid::ccittcous);
    *p++ = OID_LO(oid::ccittcous);
    *p++ = oid::ccittcous_org;
    *p++ = oid::ccittcous_orggov;
    *p++ = oid::ccittcous_orggovor;
    *p++ = oid::ccittcous_orggovor_nist;
    *p++ = oid::ccittcous_orggovor_nistaes;
    *p++ = oid::ccittcous_orggovor_nistaes_192cbc;
    *p++ = asn::null;
    *p++ = 0;
    return p;
}

AES256ECB::AES256ECB()
{
    Init();
    SetMode(aes::mode::_256ecb);
}

AES256ECB::~AES256ECB()
{
    Reset();
}

uint8_t* AES256ECB::PutOID(uint8_t* buf)
{
    uint8_t* p = buf;
    *p++ = asn::sequence;
    *p++ = 13;
    *p++ = asn::oid;
    *p++ = 9;
    *p++ = OID_BYTE1(oid::ccitt, oid::ccittco);
    *p++ = OID_HI(oid::ccittcous);
    *p++ = OID_LO(oid::ccittcous);
    *p++ = oid::ccittcous_org;
    *p++ = oid::ccittcous_orggov;
    *p++ = oid::ccittcous_orggovor;
    *p++ = oid::ccittcous_orggovor_nist;
    *p++ = oid::ccittcous_orggovor_nistaes;
    *p++ = oid::ccittcous_orggovor_nistaes_256ecb;
    *p++ = asn::null;
    *p++ = 0;
    return p;
}

AES256CBC::AES256CBC()
{
    Init();
    SetMode(aes::mode::_256cbc);
}

AES256CBC::~AES256CBC()
{
    Reset();
}

uint8_t* AES256CBC::PutOID(uint8_t* buf)
{
    uint8_t* p = buf;
    *p++ = asn::sequence;
    *p++ = 13;
    *p++ = asn::oid;
    *p++ = 9;
    *p++ = OID_BYTE1(oid::ccitt, oid::ccittco);
    *p++ = OID_HI(oid::ccittcous);
    *p++ = OID_LO(oid::ccittcous);
    *p++ = oid::ccittcous_org;
    *p++ = oid::ccittcous_orggov;
    *p++ = oid::ccittcous_orggovor;
    *p++ = oid::ccittcous_orggovor_nist;
    *p++ = oid::ccittcous_orggovor_nistaes;
    *p++ = oid::ccittcous_orggovor_nistaes_256cbc;
    *p++ = asn::null;
    *p++ = 0;
    return p;
}
